---
title: "HW4"
author: "Nick Kim"
format:
  html:
    embed-resources: true
---
Link to my [github](https://github.com/nick-kimm/506-HW4) repository 

##Problem 1 

```{r}
library(tidyverse)
library(nycflights13)
```

#part a:

Median and Mean departure delay per airport
```{r}
flights %>% group_by(origin) %>% 
  summarise(count=n(), med_dep_delay = median(dep_delay, na.rm=TRUE),
            mean_dep_delay = mean(dep_delay, na.rm=TRUE), .groups = 'drop') %>% filter(count > 10) %>%   arrange(,desc(mean_dep_delay))
```

```{r}
flights %>% group_by(dest) %>% 
  summarise(count=n(), med_arr_delay = median(arr_delay, na.rm=TRUE),
            mean_arr_delay = mean(arr_delay, na.rm=TRUE), .groups = 'drop') %>% filter(count > 10) %>%   arrange(,desc(mean_arr_delay))
```

#part b:

How many flights did the aircraft model with the fastest average speed take?
```{r}
jflights<-inner_join(flights, planes, by="tailnum")
jflights %>% group_by(model) %>% 
  summarise(count = n(),.groups = 'drop',speed = mean(distance/air_time, na.rm = TRUE))
```

##Problem 2
```{r}
nnmaps<-read.csv("/Users/nicholaskim/Documents/STAT 506/HW4/chicago-nmmaps.csv")
```

Writing function that allows user to request average temperature for a given month
```{r}
#' Get Temp 
#'A function that will return the mean, median, or other inputted function temperature for a specified month and year. The function works by first checking if the inputted variables are what we would expect. If it a numeric between 1-12 then it will filter by the respective column variables and run the specified function on the column temp for that dataset.If month is a string we will first convert everything to lower to ensure the string isn't case sensitive to upper and lower cases. In addition, will sub string the inputted month to the first 3 as that is how it is stored in our dataset nnmaps. Will then output error messages if the numeric value for month isn't b/t 1-12 and if year isn't numeric
#'
#' @param month (int or string)
#' @param year (int)
#' @param data 
#' @param celsius (binary)
#' @param average_fn (default = mean)
#'
#' @return temperature under specified function for a given year and month
#' 
#' @examples
get_temp <- function(month,year,data,celsius=FALSE,average_fn=mean){
  if(is.numeric(month)==TRUE & month <= 12 & month >= 1){
    data$month_int <- as.integer(factor(data$month, levels = substr(month.name,1,3)))
    temp<-data %>% filter(month_numeric==month_int,year==year) %>% 
          summarise(temperature=ifelse(celsius==TRUE,average_fn((temp-32)*(5/9)),average_fn(temp)))
    return(temp)
  }
  else if(is.numeric(month)==TRUE & month >12 | month < 1){
    return("Month should be a value from 1-12")
  }
  else if(is.character(month)==TRUE){
    month<-substr(month,1,3)
    temp<- data %>% filter(tolower(month)==tolower(month),year==year) %>% 
      summarise(temperature=ifelse(celsius==TRUE,average_fn((temp-32)*(5/9)),average_fn(temp)))
    return(temp)
  }
  else{
   return("Year should be numeric")
  }
}
```


Testing cases:
```{r}
get_temp("Apr", 1999, data = nnmaps)
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
get_temp(10, 1998, data = nnmaps, average_fn = median)
get_temp(13, 1998, data = nnmaps)
get_temp(2, 2005, data = nnmaps)
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```

##Problem 3

```{r}
imp_mk<-read.csv("/Users/nicholaskim/Documents/STAT 506/HW4/df_for_ml_improved_new_market.csv")
```

#part a:

Is there a change in the sales price in USD over time?
```{r}
library(ggplot2)
imp_mk<-imp_mk %>% group_by(year) %>% 
  mutate(meanprice=mean(price_usd)) %>% ungroup()
ggplot(data=imp_mk,aes(x=year,y=meanprice))+
  geom_line()+
  labs(title="Sales Price over Time")+
       xlab("Date")+
       ylab("Mean Price (USD)")
```
#part b:

Does the distribution of genre of sales across years appear to change?
```{r}
genres_imp<-imp_mk %>% select(year,price_usd,Genre___Photography,Genre___Print,Genre___Sculpture,Genre___Painting,Genre___Others) %>% 
  mutate(genre_type = ifelse(Genre___Photography==1,1,ifelse(Genre___Print==1,2,ifelse(Genre___Sculpture==1,3,4))))

ggplot(data=genres_imp,aes(x=year,fill=as.factor(genre_type)))+
  geom_bar()+
  facet_grid(vars(genre_type))+
  labs(title="Distribution of Genre of Sales over Years")+
  xlab("Year")+
  ylab("Count")+
  scale_fill_discrete(name="Genres",
                      labels=c("Photography","Print","Sculpture","Painting","Other"))

```
From the output above we can see that the genres don't seem to affect the overall distribution of sales over the years. They all seem to roughly follow a rising number of sales as the years go on. 

#part c:

How does the genre affect the change in sales price over time?
```{r}
genres_imp2<-genres_imp %>% group_by(year,genre_type) %>% 
  mutate(mean_price_gen = mean(price_usd)) %>% 
  ungroup()

ggplot(data=genres_imp2,aes(x=year,y=mean_price_gen,color=as.factor(genre_type)))+
  geom_line()+
  labs(title="Price of Sales by Genre over Years")+
  xlab("Year")+
  ylab("Mean Price (USD)")+
  scale_color_discrete(name="Genres",
                      labels=c("Photography","Print","Sculpture","Painting","Other"))
```
From the graph above we can see that as time goes on generally price has gone up with a peak at 2008 and has come down slightly since then. For prints especially, there have been a lot more variability in its market with its price fluctuating from high to low more in comparison to other types of genres.  


